{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { headers } from 'next/headers'\n\nexport function PreprMiddleware(request: any, response?: NextResponse) {\n    const newResponse = response || NextResponse.next()\n\n    let cookie = request.cookies.get('__prepr_uid')?.value\n\n    if (!cookie) {\n        cookie = crypto.randomUUID()\n        newResponse.cookies.set('__prepr_uid', cookie, {\n            maxAge: 1 * 365 * 24 * 60, // Set for one year\n        })\n    }\n\n    newResponse.headers.set('Prepr-Customer-Id', cookie)\n\n    if (process.env.PREPR_ENV === 'preview') {\n        newResponse.headers.set('Prepr-Preview-Bar', 'true')\n\n        if (request.nextUrl.searchParams.has('segments')) {\n            const segments = request.nextUrl.searchParams.get('segments')\n\n            if (segments) {\n                newResponse.headers.set('Prepr-Segments', segments)\n                newResponse.cookies.set('Prepr-Segments', segments, {\n                    maxAge: 60, // Set for one year\n                })\n            }\n        }\n\n        if (request.nextUrl.searchParams.has('a-b-testing')) {\n            const ab_testing = request.nextUrl.searchParams.get('a-b-testing')\n            let value = ab_testing?.toUpperCase()\n            if (value === 'B') {\n                value = 'B'\n            } else {\n                value = 'A'\n            }\n            newResponse.headers.set('Prepr-ABtesting', value)\n            newResponse.cookies.set('Prepr-ABtesting', value, {\n                maxAge: 60, // Set for one year\n            })\n        }\n\n        const segmentCookie = request.cookies.get('Prepr-Segments')?.value\n        if (segmentCookie) {\n            newResponse.headers.set('Prepr-Segments', segmentCookie)\n        }\n\n        const abCookie = request.cookies.get('Prepr-ABtesting')?.value\n        if (abCookie) {\n            newResponse.headers.set('Prepr-ABtesting', abCookie)\n        }\n    }\n\n    return newResponse\n}\n\n/**\n * Returns the Prepr Customer ID from the headers\n */\nexport async function getPreprUUID() {\n    const headersList = await headers()\n    return headersList.get('prepr-customer-id')\n}\n\n/**\n * Retuns the active segment from the headers\n */\nexport async function getActiveSegment() {\n    const headersList = await headers()\n    return headersList.get('Prepr-Segments')\n}\n\n/**\n * Returns the active variant from the headers\n */\nexport async function getActiveVariant() {\n    const headersList = await headers()\n    return headersList.get('Prepr-ABtesting')\n}\n\n/**\n * Helper function to retrieve Prepr headers (will filter out customer ID if in preview mode)\n */\nexport async function getPreprHeaders() {\n    let newHeaders: {\n        [key: string]: string\n    } = {}\n\n    const headersList = await headers()\n\n    headersList.forEach((value, key) => {\n        if (key.startsWith('prepr')) {\n            newHeaders[key] = value\n        }\n    })\n\n    return newHeaders\n}\n\nexport type PreprSegment = {\n    id: string\n    created_on: string\n    changed_on: string\n    synced_on: string\n    label: string\n    reference_id: string\n    body: string\n    query: string\n    count: number\n}\n\nexport type PreprSegmentsResponse = {\n    total: number\n    skip: number\n    limit: number\n    items: PreprSegment[]\n}\n\n/**\n * Fetches the segments from the Prepr API\n * @param token Prepr access token with scope 'segments'\n * @returns Object with total, skip, limit and items\n */\nexport async function getPreprEnvironmentSegments(\n    token: string\n): Promise<PreprSegmentsResponse> {\n    const response = await fetch('https://api.eu1.prepr.io/segments', {\n        headers: {\n            Authorization: `Bearer ${token}`,\n            'User-Agent': 'Prepr-Preview-Bar/1.0',\n        },\n    })\n\n    return response.json()\n}\n\n/**\n * Fetches all the necessary previewbar props\n * @param token Prepr access token with scope 'segments'\n * @returns Object with activeSegment, activeVariant and data\n */\nexport async function getPreviewBarProps(token: string): Promise<{\n    activeSegment: string | null\n    activeVariant: string | null\n    data: PreprSegmentsResponse\n}> {\n    const data = await getPreprEnvironmentSegments(token)\n    const activeSegment = await getActiveSegment()\n    const activeVariant = await getActiveVariant()\n\n    return {\n        activeSegment,\n        activeVariant,\n        data,\n    }\n}\n"],"mappings":";;;;;AAAA,SAAS,oBAAoB;AAC7B,SAAS,eAAe;AAEjB,SAAS,gBAAgB,SAAc,UAAyB;AAHvE;AAII,QAAM,cAAc,YAAY,aAAa,KAAK;AAElD,MAAI,UAAS,aAAQ,QAAQ,IAAI,aAAa,MAAjC,mBAAoC;AAEjD,MAAI,CAAC,QAAQ;AACT,aAAS,OAAO,WAAW;AAC3B,gBAAY,QAAQ,IAAI,eAAe,QAAQ;AAAA,MAC3C,QAAQ,IAAI,MAAM,KAAK;AAAA;AAAA,IAC3B,CAAC;AAAA,EACL;AAEA,cAAY,QAAQ,IAAI,qBAAqB,MAAM;AAEnD,MAAI,QAAQ,IAAI,cAAc,WAAW;AACrC,gBAAY,QAAQ,IAAI,qBAAqB,MAAM;AAEnD,QAAI,QAAQ,QAAQ,aAAa,IAAI,UAAU,GAAG;AAC9C,YAAM,WAAW,QAAQ,QAAQ,aAAa,IAAI,UAAU;AAE5D,UAAI,UAAU;AACV,oBAAY,QAAQ,IAAI,kBAAkB,QAAQ;AAClD,oBAAY,QAAQ,IAAI,kBAAkB,UAAU;AAAA,UAChD,QAAQ;AAAA;AAAA,QACZ,CAAC;AAAA,MACL;AAAA,IACJ;AAEA,QAAI,QAAQ,QAAQ,aAAa,IAAI,aAAa,GAAG;AACjD,YAAM,aAAa,QAAQ,QAAQ,aAAa,IAAI,aAAa;AACjE,UAAI,QAAQ,yCAAY;AACxB,UAAI,UAAU,KAAK;AACf,gBAAQ;AAAA,MACZ,OAAO;AACH,gBAAQ;AAAA,MACZ;AACA,kBAAY,QAAQ,IAAI,mBAAmB,KAAK;AAChD,kBAAY,QAAQ,IAAI,mBAAmB,OAAO;AAAA,QAC9C,QAAQ;AAAA;AAAA,MACZ,CAAC;AAAA,IACL;AAEA,UAAM,iBAAgB,aAAQ,QAAQ,IAAI,gBAAgB,MAApC,mBAAuC;AAC7D,QAAI,eAAe;AACf,kBAAY,QAAQ,IAAI,kBAAkB,aAAa;AAAA,IAC3D;AAEA,UAAM,YAAW,aAAQ,QAAQ,IAAI,iBAAiB,MAArC,mBAAwC;AACzD,QAAI,UAAU;AACV,kBAAY,QAAQ,IAAI,mBAAmB,QAAQ;AAAA,IACvD;AAAA,EACJ;AAEA,SAAO;AACX;AAKA,SAAsB,eAAe;AAAA;AACjC,UAAM,cAAc,MAAM,QAAQ;AAClC,WAAO,YAAY,IAAI,mBAAmB;AAAA,EAC9C;AAAA;AAKA,SAAsB,mBAAmB;AAAA;AACrC,UAAM,cAAc,MAAM,QAAQ;AAClC,WAAO,YAAY,IAAI,gBAAgB;AAAA,EAC3C;AAAA;AAKA,SAAsB,mBAAmB;AAAA;AACrC,UAAM,cAAc,MAAM,QAAQ;AAClC,WAAO,YAAY,IAAI,iBAAiB;AAAA,EAC5C;AAAA;AAKA,SAAsB,kBAAkB;AAAA;AACpC,QAAI,aAEA,CAAC;AAEL,UAAM,cAAc,MAAM,QAAQ;AAElC,gBAAY,QAAQ,CAAC,OAAO,QAAQ;AAChC,UAAI,IAAI,WAAW,OAAO,GAAG;AACzB,mBAAW,GAAG,IAAI;AAAA,MACtB;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA;AA0BA,SAAsB,4BAClB,OAC8B;AAAA;AAC9B,UAAM,WAAW,MAAM,MAAM,qCAAqC;AAAA,MAC9D,SAAS;AAAA,QACL,eAAe,UAAU,KAAK;AAAA,QAC9B,cAAc;AAAA,MAClB;AAAA,IACJ,CAAC;AAED,WAAO,SAAS,KAAK;AAAA,EACzB;AAAA;AAOA,SAAsB,mBAAmB,OAItC;AAAA;AACC,UAAM,OAAO,MAAM,4BAA4B,KAAK;AACpD,UAAM,gBAAgB,MAAM,iBAAiB;AAC7C,UAAM,gBAAgB,MAAM,iBAAiB;AAE7C,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA;","names":[]}